# -*- coding: utf-8 -*-
"""PyLabRobot new template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ljiMtb2jrh7-a-ZpjeO7i92d1sQY8KIP

# Colab PyLabRobot Petri Visualizer

[PyLabRobot](https://github.com/PyLabRobot/pylabrobot) is an open source interface to Opentrons and other liquid handling robots. In this notebook, you'll use PyLabRobot to draw patterns on a black agar plate.
"""

opentrons_ip = None # will be set by the TA during the real run

"""## Installation"""

import sys
sys.version

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (10,10)

"""## Defining a dummy PyLabRobot backend for visualization

This section is optional to read, but mendatory to execute!

PyLabRobot supports many different robots through different _backends_. A backend is a Python object responsible for turning general PyLabRobot commands into commands a machine can understand.

Below, we simulate a backend to keep track of tip pickups and drops. In addition, we keep track of the dispenses on the Agar plate to create nice visualizations before actually running a protocol on the robot!
"""

from typing import List, Optional
from pylabrobot.liquid_handling.backends import LiquidHandlerBackend
from pylabrobot.resources import Coordinate, PetriDishHolder, PetriDish
from pylabrobot.liquid_handling.standard import (
  Pickup,
  PickupTipRack,
  Drop,
  DropTipRack,
  Aspiration,
  AspirationPlate,
  Dispense,
  DispensePlate,
  Move,
)

class AgarSimulatingBackend(LiquidHandlerBackend):
  async def setup(self):
    await super().setup()

    self.liquid_volume = 0
    self.has_tip = False
    self.drops = []
    self.dispensed_volume = 0
    self.color = None

  async def stop(self):
    await super.stop()

  @property
  def num_channels(self) -> int:
    """ The number of channels that the robot has. """
    return 1

  async def pick_up_tips(self, ops: List[Pickup], use_channels: List[int]):
    """ Pick up tips from the specified resource. """
    assert len(use_channels) == len(ops) == 1, "Only one tip can be picked up at a time."
    self.has_tip = True
    self.color = None

  async def drop_tips(self, ops: List[Drop], use_channels: List[int]):
    """ Drop tips from the specified resource. """
    assert len(use_channels) == len(ops) == 1, "Only one tip can be dropped at a time."
    self.has_tip = False

  async def aspirate(self, ops: List[Aspiration], use_channels: List[int]):
    """ Aspirate liquid from the specified resource using pip. """
    assert self.has_tip, "No tip has been picked up."
    assert len(use_channels) == len(ops) == 1, "Only one aspiration can be done at a time."

    op = ops[0]
    if op.resource.name == "tc_tube_rack_tube_0_0": # well A1
      goto_color = "green"
    # elif op.resource.name == "tc_tube_rack_tube_1_0": # well A2
      # goto_color = "yellow"
    else:
      raise RuntimeError("Please aspirate from well A1 (green)")

    if self.color is not None and goto_color != self.color:
      raise RuntimeError("Be careful to not cross-contaminate!")
    self.color = goto_color

    self.liquid_volume += ops[0].volume

  async def dispense(self, ops: List[Dispense], use_channels: List[int]):
    """ Dispense liquid from the specified resource using pip. """
    assert self.has_tip, "No tip has been picked up."
    assert len(use_channels) == len(ops) == 1, "Only one dispense can be done at a time."

    op = ops[0]

    if self.liquid_volume < op.volume:
      raise ValueError("Not enough liquid to dispense.")
    self.liquid_volume -= op.volume
    self.dispensed_volume += op.volume

    if isinstance(op.resource, PetriDishHolder):
      raise ValueError("Dispensing to a Petri dish holder is not supported. Use the petri dish "
                        "resource instead. This is available through holder.dish.")

    if isinstance(op.resource, PetriDish):
      offset_from_center = op.offset - op.resource.center()
      self.drops.append((offset_from_center.x, offset_from_center.y, self.color))

  async def move_resource(self, move: Move): raise NotImplementedError("Moving resources is not supported.")
  async def pick_up_tips96(self, pickup: PickupTipRack): raise NotImplementedError("Picking up tips using the 96 head is not supported.")
  async def drop_tips96(self, drop: DropTipRack): raise NotImplementedError("Dropping tips using the 96 head is not supported.")
  async def aspirate96(self, aspiration: AspirationPlate): raise NotImplementedError("Aspirating from all wells using the 96 head is not supported.")
  async def dispense96(self, dispense: DispensePlate): raise NotImplementedError("Dispensing to all wells using the 96 head is not supported.")

  async def move_pipette_head(
    self,
    location: Coordinate,
    speed: Optional[float] = None,
    minimum_z_height: Optional[float] = None,
    pipette_id: Optional[str] = None,
    force_direct: bool = False
  ):
    pass

  def visualize(self):
    print()
    print("### Total Volume used: ", self.dispensed_volume, "uL ###")
    print()
    plt.scatter(0, 0, s=112*50*50, c='#d7ca95') # agar plate
    for x, y, color in self.drops:
      plt.scatter(x, y, s=100, c=color)

    plt.xlim((-46, 46))
    plt.ylim((-46, 46))
    plt.show()

  def reset(self):
    self.liquid_volume = 0
    self.has_tip = False
    self.drops = []
    self.dispensed_volume = 0
    self.color = None

"""## PyLabRobot deck setup

Create a new instance of LiquidHandler with a dummy backend for simulation and visualization. For the deck, we will use the Opentrons deck: OTDeck.
"""

from pylabrobot.liquid_handling import LiquidHandler
from pylabrobot.liquid_handling.backends import OpentronsBackend
from pylabrobot.resources import OTDeck

async def main():
    if opentrons_ip is not None:
        backend = OpentronsBackend(host=opentrons_ip, port=31950)
    else:
        backend = AgarSimulatingBackend()
    lh = LiquidHandler(backend=backend, deck=OTDeck())
    await lh.setup()

    """PyLabRobot supports many labware items. Here, we use an 20ul opentrons tips tip rack in slot 11."""

    from pylabrobot.resources.opentrons import opentrons_96_tiprack_20ul
    tips20 = opentrons_96_tiprack_20ul(name="tip_rack_20")
    lh.deck.assign_child_at_slot(tips20, slot=8)

    """Bacteria are stored in tubes on the temperature control unit. Specifically, bacteria are stored in wells A1 and A2. Below we create a new instance of the temperature module and assign it to spot 3 on the deck."""

    from pylabrobot.temperature_controlling.opentrons import OpentronsTemperatureModuleV2
    tc = OpentronsTemperatureModuleV2(name="tc", opentrons_id="fc409cc91770129af8eb0a01724c56cb052b306a")
    lh.deck.assign_child_at_slot(tc, slot=3)

    """Below, we create a new petri dish inside a petri dish holder. The PetriDish represents the actual plate; the holder is a custom 3d printed labware object that holds the plate in the standard 96-well plate format.

    Then we assign the holder to spot 1 on the robot.
    """

    from pylabrobot.resources.coordinate import Coordinate
    from pylabrobot.resources.petri_dish import PetriDish, PetriDishHolder

    plate_width = 127.0
    diameter = 86.0


    def ot_petri_dish_holder(name: str) -> PetriDishHolder:
    holder = PetriDishHolder(name=name, size_x=plate_width, size_y=86.0, size_z=14.5)

    dish = PetriDish(name=f"{name}_dish", diameter=diameter, height=14.5)
    holder.assign_child_resource(dish, location=Coordinate(
        x=plate_width/2 - diameter/2,
        y=0, z=0))

    return holder

    holder = ot_petri_dish_holder("petri_holder")
    lh.deck.assign_child_at_slot(holder, slot=1)
    dish = holder.dish

    """## The protocol

    Calibrate tip on top of agar plate, all of them have different heights. The TA will perform this step for you.
    """

    z_offset = 10
    if opentrons_ip is not None:
    dish_center = dish.get_absolute_location() + dish.center()
    await lh.move_pipette_head(dish_center + Coordinate(x=0, y=0, z=z_offset))

    """Creating a simple + pattern. We do this by first picking up a tip from location A1 in the temperature controlled unit. Then we aspirate some liquid from well A1. For the dispensing, dropping liquid on the agar plate, we loop over the x-axis first. At each point, we dispense at a certain offset. An offset of 0,0 corresponds to the center of the dish. After we are done with this color, we discard the tip to trash.

    The plate has a diameter of 86mm, but we recommend using up to 70mm for the patter. Each drop should be 1uL. While the maximal volume of the tip is 20uL, we recommend using up to 15uL at a time.

    This is a good place to start your own pattern when you are ready. Feel free to delete the code below and start from scratch!
    """

    # change this code to your own pattern

    await lh.pick_up_tips(tips20["A1"], offsets=[Coordinate(y=0.5, z=-6)]) # this offset is required due to an inaccuracy on the robot
    await lh.aspirate(tc.tube_rack["A1"], vols=[20])
    for x in range(-40, 40, 10): # 8 dots
    await lh.dispense(dish, vols=[1], offsets=[Coordinate(x=x, y=0, z=0)])

    for y in range(-40, 40, 10): # 8 dots
    await lh.dispense(dish, vols=[1], offsets=[Coordinate(x=0, y=y, z=0)])

    await lh.discard_tips()

    """Visualize the result with `backend.visualize()`. You keep can adding liquid at any point after this."""

    if opentrons_ip is None:
    backend.visualize()

    """The visualization can be reset with `backend.reset()`."""

    backend.reset()

"""Now it's your turn! Go to the cell above where the pattern is created and create something of your own!"""